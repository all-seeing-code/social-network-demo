type User {
    id: ID!
    email: String! @id
    firstName: String! @search(by:[fulltext, term])
    knows: [User]
    hasInterest: [Tag]
    creator: [Post] @hasInverse(field: hasCreator)
}
type Tag {
    id: ID!
    name: String! @id
}
type Post {
    id: ID!
    title: String!
    content: String @search(by:[term])
    hasTag: [Tag!]!
    hasCreator: User!
  	score: Float
}
type Comment {
    id: ID!
    content: String! @id
    createdAt: Int!
    hasCreator: User!
    post: Post!
}

enum ReactionType{
    like
    support
    celebrate
}
type Reaction  @withSubscription @auth(
    query : { rule: """
        query ($USER: ID!){
                queryReaction{
                    post{
                    hasCreator(filter:{
                    id: [$USER]
                    }){
                        __typename
                    }
                    __typename
                }
            }
        }"""
    }
){
  	id: ID!
    reaction: ReactionType!
    createdAt: Int!
    post: Post!
    user: User!
}
type Query{
	queryDegreeOfSeparation(userAemail : String!, userBemail: String!) : [User] @custom(
        dql:"""
        query q($userAemail : string, $userBemail: string){
            uidA as var(func: type(User)) @filter(eq(User.email, $userAemail))
            uidB as var(func: type(User)) @filter(eq(User.email, $userBemail))
            path as shortest(from: uid(uidA), to: uid(uidB)){
                User.knows
            }
            queryDegreeOfSeparation(func: uid(path)){
                id: uid
                firstName: User.firstName
                lastName: User.lastName
                email: User.email
                gender: User.gender
            }
        }"""
    )

    queryUserTimeline(userEmail: String!): [Post] @custom(
    dql:"""
		query q($userEmail: string){
    pid as var(func: type(User))@filter(eq( User.email, $userEmail))
  	var(func: uid(pid)){
      friends as User.knows{
      	uid
      	User.firstName
    	}
    	tagsOfInterest as User.hasInterest{
    		Tag.name
    		uid
  		}
    }
  	var(func: type(Post))@filter(uid_in(Post.hasTag, uid(tagsOfInterest))){
    	friendsScoreWithInterest as count(Post.hasCreator) @filter(uid(friends))	
  	}
  	var(func: type(Post))@filter(NOT uid_in(Post.hasTag, uid(tagsOfInterest))){
    	friendsScoreWithoutInterest as count(Post.hasCreator) @filter(uid(friends))	
  	}
  	var(func: type(Post))@filter( uid_in(Post.hasTag, uid(tagsOfInterest))){
    	InterestScore as count(Post.hasCreator) @filter(NOT uid(friends))	
  	}
  	var(func: type(Post)){
      # Post.title
      score as math(friendsScoreWithInterest + InterestScore*0.8 +  friendsScoreWithoutInterest*0.5)
    }
    queryUserTimeline(func: type(Post), orderdesc: val(score)){
      id: uid
      title: Post.title
      score: val(score)
    }
  }
"""
  )
}

type Mutation {
    newComment(
        content: String!
        post: ID!
        user: ID!
        time: Int!
    ): String! @lambda
}


# Dgraph.Authorization  {"VerificationKey":"secret","Header":"Authorization","Namespace":"https://dgraph.io/jwt/claims","Algo":"HS256"}
